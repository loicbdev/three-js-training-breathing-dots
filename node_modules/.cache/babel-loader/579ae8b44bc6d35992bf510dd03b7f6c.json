{"ast":null,"code":"import { LinearFilter, RGBFormat, ShaderMaterial, UniformsUtils, WebGLRenderTarget } from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\n\nvar SavePass = function SavePass(renderTarget) {\n  Pass.call(this);\n  if (CopyShader === undefined) console.error(\"SavePass relies on CopyShader\");\n  var shader = CopyShader;\n  this.textureID = \"tDiffuse\";\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  this.renderTarget = renderTarget;\n\n  if (this.renderTarget === undefined) {\n    this.renderTarget = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat\n    });\n    this.renderTarget.texture.name = \"SavePass.rt\";\n  }\n\n  this.needsSwap = false;\n  this.fsQuad = new Pass.FullScreenQuad(this.material);\n};\n\nSavePass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: SavePass,\n  render: function render(renderer, writeBuffer, readBuffer) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n\n    renderer.setRenderTarget(this.renderTarget);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n});\nexport { SavePass };","map":{"version":3,"sources":["/home/loic/Downloads/three-js-breathing-dots/node_modules/three/examples/jsm/postprocessing/SavePass.js"],"names":["LinearFilter","RGBFormat","ShaderMaterial","UniformsUtils","WebGLRenderTarget","Pass","CopyShader","SavePass","renderTarget","call","undefined","console","error","shader","textureID","uniforms","clone","material","vertexShader","fragmentShader","window","innerWidth","innerHeight","minFilter","magFilter","format","texture","name","needsSwap","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","value","setRenderTarget","clear"],"mappings":"AAAA,SACCA,YADD,EAECC,SAFD,EAGCC,cAHD,EAICC,aAJD,EAKCC,iBALD,QAMO,gCANP;AAOA,SAASC,IAAT,QAAqB,2BAArB;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAEA,IAAIC,QAAQ,GAAG,SAAXA,QAAW,CAAWC,YAAX,EAA0B;AAExCH,EAAAA,IAAI,CAACI,IAAL,CAAW,IAAX;AAEA,MAAKH,UAAU,KAAKI,SAApB,EACCC,OAAO,CAACC,KAAR,CAAe,+BAAf;AAED,MAAIC,MAAM,GAAGP,UAAb;AAEA,OAAKQ,SAAL,GAAiB,UAAjB;AAEA,OAAKC,QAAL,GAAgBZ,aAAa,CAACa,KAAd,CAAqBH,MAAM,CAACE,QAA5B,CAAhB;AAEA,OAAKE,QAAL,GAAgB,IAAIf,cAAJ,CAAoB;AAEnCa,IAAAA,QAAQ,EAAE,KAAKA,QAFoB;AAGnCG,IAAAA,YAAY,EAAEL,MAAM,CAACK,YAHc;AAInCC,IAAAA,cAAc,EAAEN,MAAM,CAACM;AAJY,GAApB,CAAhB;AAQA,OAAKX,YAAL,GAAoBA,YAApB;;AAEA,MAAK,KAAKA,YAAL,KAAsBE,SAA3B,EAAuC;AAEtC,SAAKF,YAAL,GAAoB,IAAIJ,iBAAJ,CAAuBgB,MAAM,CAACC,UAA9B,EAA0CD,MAAM,CAACE,WAAjD,EAA8D;AAAEC,MAAAA,SAAS,EAAEvB,YAAb;AAA2BwB,MAAAA,SAAS,EAAExB,YAAtC;AAAoDyB,MAAAA,MAAM,EAAExB;AAA5D,KAA9D,CAApB;AACA,SAAKO,YAAL,CAAkBkB,OAAlB,CAA0BC,IAA1B,GAAiC,aAAjC;AAEA;;AAED,OAAKC,SAAL,GAAiB,KAAjB;AAEA,OAAKC,MAAL,GAAc,IAAIxB,IAAI,CAACyB,cAAT,CAAyB,KAAKb,QAA9B,CAAd;AAEA,CAlCD;;AAoCAV,QAAQ,CAACwB,SAAT,GAAqBC,MAAM,CAACC,MAAP,CAAeD,MAAM,CAACE,MAAP,CAAe7B,IAAI,CAAC0B,SAApB,CAAf,EAAgD;AAEpEI,EAAAA,WAAW,EAAE5B,QAFuD;AAIpE6B,EAAAA,MAAM,EAAE,gBAAWC,QAAX,EAAqBC,WAArB,EAAkCC,UAAlC,EAA+C;AAEtD,QAAK,KAAKxB,QAAL,CAAe,KAAKD,SAApB,CAAL,EAAuC;AAEtC,WAAKC,QAAL,CAAe,KAAKD,SAApB,EAAgC0B,KAAhC,GAAwCD,UAAU,CAACb,OAAnD;AAEA;;AAEDW,IAAAA,QAAQ,CAACI,eAAT,CAA0B,KAAKjC,YAA/B;AACA,QAAK,KAAKkC,KAAV,EAAkBL,QAAQ,CAACK,KAAT;AAClB,SAAKb,MAAL,CAAYO,MAAZ,CAAoBC,QAApB;AAEA;AAhBmE,CAAhD,CAArB;AAoBA,SAAS9B,QAAT","sourcesContent":["import {\n\tLinearFilter,\n\tRGBFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tWebGLRenderTarget\n} from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\n\nvar SavePass = function ( renderTarget ) {\n\n\tPass.call( this );\n\n\tif ( CopyShader === undefined )\n\t\tconsole.error( \"SavePass relies on CopyShader\" );\n\n\tvar shader = CopyShader;\n\n\tthis.textureID = \"tDiffuse\";\n\n\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\tthis.material = new ShaderMaterial( {\n\n\t\tuniforms: this.uniforms,\n\t\tvertexShader: shader.vertexShader,\n\t\tfragmentShader: shader.fragmentShader\n\n\t} );\n\n\tthis.renderTarget = renderTarget;\n\n\tif ( this.renderTarget === undefined ) {\n\n\t\tthis.renderTarget = new WebGLRenderTarget( window.innerWidth, window.innerHeight, { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBFormat } );\n\t\tthis.renderTarget.texture.name = \"SavePass.rt\";\n\n\t}\n\n\tthis.needsSwap = false;\n\n\tthis.fsQuad = new Pass.FullScreenQuad( this.material );\n\n};\n\nSavePass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: SavePass,\n\n\trender: function ( renderer, writeBuffer, readBuffer ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderTarget );\n\t\tif ( this.clear ) renderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t}\n\n} );\n\nexport { SavePass };\n"]},"metadata":{},"sourceType":"module"}