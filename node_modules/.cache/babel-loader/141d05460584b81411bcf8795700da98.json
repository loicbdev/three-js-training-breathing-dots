{"ast":null,"code":"import _toConsumableArray from \"/home/loic/Downloads/three-js-breathing-dots/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"/home/loic/Downloads/three-js-breathing-dots/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useRef } from 'react';\nimport { Canvas, useFrame } from 'react-three-fiber';\nimport { Effects } from './Effects';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar roundedSquareWave = function roundedSquareWave(t, delta, a, f) {\n  return 2 * a / Math.PI * Math.atan(Math.sin(2 * Math.PI * t * f) / delta);\n};\n\nfunction Dots() {\n  _s();\n\n  var ref = useRef();\n\n  var _useMemo = useMemo(function () {\n    var vec = new THREE.Vector3();\n    var transform = new THREE.Matrix4(); // Precompute randomized initial positions\n\n    // Precompute randomized initial positions\n    var positions = _toConsumableArray(Array(10000)).map(function (_, i) {\n      var position = new THREE.Vector3(); // Place in a grid\n\n      // Place in a grid\n      position.x = i % 100 - 50;\n      position.y = Math.floor(i / 100) - 50; // Offset every other column (hexagonal pattern)\n\n      // Offset every other column (hexagonal pattern)\n      position.y += i % 2 * 0.5; // Add some noise\n\n      // Add some noise\n      position.x += Math.random() * 0.3;\n      position.y += Math.random() * 0.3;\n      return position;\n    }); // Precompute initial distances with octagonal offset\n\n\n    // Precompute initial distances with octagonal offset\n    var right = new THREE.Vector3(1, 0, 0);\n    var distances = positions.map(function (pos) {\n      return pos.length() + Math.cos(pos.angleTo(right) * 8) * 0.5;\n    });\n    return {\n      vec: vec,\n      transform: transform,\n      positions: positions,\n      distances: distances\n    };\n  }, []),\n      vec = _useMemo.vec,\n      transform = _useMemo.transform,\n      positions = _useMemo.positions,\n      distances = _useMemo.distances;\n\n  useFrame(function (_ref) {\n    var clock = _ref.clock;\n\n    for (var i = 0; i < 10000; ++i) {\n      var dist = distances[i]; // Distance affects the wave phase\n\n      var t = clock.elapsedTime - dist / 25; // Oscillates between -0.4 and +0.4\n\n      var wave = roundedSquareWave(t, 0.15 + 0.2 * dist / 72, 0.4, 1 / 3.8); // Scale initial position by our oscillator\n\n      vec.copy(positions[i]).multiplyScalar(wave + 1.3); // Apply the Vector3 to a Matrix4\n\n      transform.setPosition(vec); // Update Matrix4 for this instance\n\n      ref.current.setMatrixAt(i, transform);\n    }\n\n    ref.current.instanceMatrix.needsUpdate = true;\n  });\n  return /*#__PURE__*/_jsxDEV(\"instancedMesh\", {\n    ref: ref,\n    args: [null, null, 10000],\n    children: [/*#__PURE__*/_jsxDEV(\"circleBufferGeometry\", {\n      args: [0.15]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dots, \"TbyJAnA0WBrw7EYfMNxPansTfXY=\", false, function () {\n  return [useFrame];\n});\n\n_c = Dots;\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    orthographic: true,\n    camera: {\n      zoom: 20\n    },\n    colorManagement: false,\n    children: [/*#__PURE__*/_jsxDEV(\"color\", {\n      attach: \"background\",\n      args: ['black']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Effects, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dots, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Dots\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/home/loic/Downloads/three-js-breathing-dots/src/App.js"],"names":["React","useMemo","useRef","Canvas","useFrame","Effects","THREE","roundedSquareWave","t","delta","a","f","Math","PI","atan","sin","Dots","ref","vec","Vector3","transform","Matrix4","positions","Array","map","_","i","position","x","y","floor","random","right","distances","pos","length","cos","angleTo","clock","dist","elapsedTime","wave","copy","multiplyScalar","setPosition","current","setMatrixAt","instanceMatrix","needsUpdate","App","zoom"],"mappings":"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","sourcesContent":["import React, { useMemo, useRef } from 'react'\r\nimport { Canvas, useFrame } from 'react-three-fiber'\r\nimport { Effects } from './Effects'\r\nimport * as THREE from 'three'\r\n\r\nconst roundedSquareWave = (t, delta, a, f) => {\r\n  return ((2 * a) / Math.PI) * Math.atan(Math.sin(2 * Math.PI * t * f) / delta)\r\n}\r\n\r\nfunction Dots() {\r\n  const ref = useRef()\r\n  const { vec, transform, positions, distances } = useMemo(() => {\r\n    const vec = new THREE.Vector3()\r\n    const transform = new THREE.Matrix4()\r\n\r\n    // Precompute randomized initial positions\r\n    const positions = [...Array(10000)].map((_, i) => {\r\n      const position = new THREE.Vector3()\r\n      // Place in a grid\r\n      position.x = (i % 100) - 50\r\n      position.y = Math.floor(i / 100) - 50\r\n\r\n      // Offset every other column (hexagonal pattern)\r\n      position.y += (i % 2) * 0.5\r\n\r\n      // Add some noise\r\n      position.x += Math.random() * 0.3\r\n      position.y += Math.random() * 0.3\r\n      return position\r\n    })\r\n\r\n    // Precompute initial distances with octagonal offset\r\n    const right = new THREE.Vector3(1, 0, 0)\r\n    const distances = positions.map((pos) => {\r\n      return pos.length() + Math.cos(pos.angleTo(right) * 8) * 0.5\r\n    })\r\n    return { vec, transform, positions, distances }\r\n  }, [])\r\n  useFrame(({ clock }) => {\r\n    for (let i = 0; i < 10000; ++i) {\r\n      const dist = distances[i]\r\n\r\n      // Distance affects the wave phase\r\n      const t = clock.elapsedTime - dist / 25\r\n\r\n      // Oscillates between -0.4 and +0.4\r\n      const wave = roundedSquareWave(t, 0.15 + (0.2 * dist) / 72, 0.4, 1 / 3.8)\r\n\r\n      // Scale initial position by our oscillator\r\n      vec.copy(positions[i]).multiplyScalar(wave + 1.3)\r\n\r\n      // Apply the Vector3 to a Matrix4\r\n      transform.setPosition(vec)\r\n\r\n      // Update Matrix4 for this instance\r\n      ref.current.setMatrixAt(i, transform)\r\n    }\r\n    ref.current.instanceMatrix.needsUpdate = true\r\n  })\r\n  return (\r\n    <instancedMesh ref={ref} args={[null, null, 10000]}>\r\n      <circleBufferGeometry args={[0.15]} />\r\n      <meshBasicMaterial />\r\n    </instancedMesh>\r\n  )\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <Canvas orthographic camera={{ zoom: 20 }} colorManagement={false}>\r\n      <color attach=\"background\" args={['black']} />\r\n      <Effects />\r\n      <Dots />\r\n    </Canvas>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}