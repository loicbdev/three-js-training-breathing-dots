{"ast":null,"code":"var _jsxFileName = \"/home/loic/Downloads/three-js-breathing-dots/src/Effects.js\",\n    _s = $RefreshSig$();\n\nimport * as THREE from 'three';\nimport React, { useMemo, useEffect, useRef } from 'react';\nimport { useThree, useFrame, extend } from 'react-three-fiber';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\nimport { SavePass } from 'three/examples/jsm/postprocessing/SavePass';\nimport { CopyShader } from 'three/examples/jsm/shaders/CopyShader';\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nextend({\n  EffectComposer: EffectComposer,\n  ShaderPass: ShaderPass,\n  SavePass: SavePass,\n  RenderPass: RenderPass\n}); // Shader that composites the r,g,b channels of 3 textures, respectively\n\nvar triColorMix = {\n  uniforms: {\n    tDiffuse1: {\n      value: null\n    },\n    tDiffuse2: {\n      value: null\n    },\n    tDiffuse3: {\n      value: null\n    }\n  },\n  vertexShader: \"\\n    varying vec2 vUv;\\n    void main() {\\n      vUv = uv;\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1);\\n    }\\n  \",\n  fragmentShader: \"\\n    varying vec2 vUv;\\n    uniform sampler2D tDiffuse1;\\n    uniform sampler2D tDiffuse2;\\n    uniform sampler2D tDiffuse3;\\n    \\n    void main() {\\n      vec4 del0 = texture2D(tDiffuse1, vUv);\\n      vec4 del1 = texture2D(tDiffuse2, vUv);\\n      vec4 del2 = texture2D(tDiffuse3, vUv);\\n      float alpha = min(min(del0.a, del1.a), del2.a);\\n      gl_FragColor = vec4(del0.r, del1.g, del2.b, alpha);\\n    }\\n  \"\n};\nexport function Effects() {\n  _s();\n\n  var composer = useRef();\n  var savePass = useRef();\n  var blendPass = useRef();\n  var swap = useRef(false); // Whether to swap the delay buffers\n\n  var _useThree = useThree(),\n      scene = _useThree.scene,\n      gl = _useThree.gl,\n      size = _useThree.size,\n      camera = _useThree.camera;\n\n  var _useMemo = useMemo(function () {\n    var rtA = new THREE.WebGLRenderTarget(size.width, size.height);\n    var rtB = new THREE.WebGLRenderTarget(size.width, size.height);\n    return {\n      rtA: rtA,\n      rtB: rtB\n    };\n  }, [size]),\n      rtA = _useMemo.rtA,\n      rtB = _useMemo.rtB;\n\n  useEffect(function () {\n    return void composer.current.setSize(size.width, size.height);\n  }, [size]);\n  useFrame(function () {\n    // Swap render targets and update dependencies\n    var delay1 = swap.current ? rtB : rtA;\n    var delay2 = swap.current ? rtA : rtB;\n    savePass.current.renderTarget = delay2;\n    blendPass.current.uniforms['tDiffuse2'].value = delay1.texture;\n    blendPass.current.uniforms['tDiffuse3'].value = delay2.texture;\n    swap.current = !swap.current;\n    composer.current.render();\n  }, 1);\n  var pixelRatio = gl.getPixelRatio();\n  return /*#__PURE__*/_jsxDEV(\"effectComposer\", {\n    ref: composer,\n    args: [gl],\n    children: [/*#__PURE__*/_jsxDEV(\"renderPass\", {\n      attachArray: \"passes\",\n      scene: scene,\n      camera: camera\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"shaderPass\", {\n      attachArray: \"passes\",\n      ref: blendPass,\n      args: [triColorMix, 'tDiffuse1'],\n      needsSwap: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"savePass\", {\n      attachArray: \"passes\",\n      ref: savePass,\n      needsSwap: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"shaderPass\", {\n      attachArray: \"passes\",\n      args: [FXAAShader],\n      \"uniforms-resolution-value-x\": 1 / (size.width * pixelRatio),\n      \"uniforms-resolution-value-y\": 1 / (size.height * pixelRatio)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"shaderPass\", {\n      attachArray: \"passes\",\n      args: [CopyShader]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Effects, \"i1tFNrAsQ5oE5O2jOEEaQ5cCQ4A=\", false, function () {\n  return [useThree, useFrame];\n});\n\n_c = Effects;\n\nvar _c;\n\n$RefreshReg$(_c, \"Effects\");","map":{"version":3,"sources":["/home/loic/Downloads/three-js-breathing-dots/src/Effects.js"],"names":["THREE","React","useMemo","useEffect","useRef","useThree","useFrame","extend","EffectComposer","ShaderPass","SavePass","CopyShader","FXAAShader","RenderPass","triColorMix","uniforms","tDiffuse1","value","tDiffuse2","tDiffuse3","vertexShader","fragmentShader","Effects","composer","savePass","blendPass","swap","scene","gl","size","camera","rtA","WebGLRenderTarget","width","height","rtB","current","setSize","delay1","delay2","renderTarget","texture","render","pixelRatio","getPixelRatio"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\r\nimport React, { useMemo, useEffect, useRef } from 'react'\r\nimport { useThree, useFrame, extend } from 'react-three-fiber'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\r\nimport { SavePass } from 'three/examples/jsm/postprocessing/SavePass'\r\nimport { CopyShader } from 'three/examples/jsm/shaders/CopyShader'\r\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader'\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\r\n\r\nextend({ EffectComposer, ShaderPass, SavePass, RenderPass })\r\n\r\n// Shader that composites the r,g,b channels of 3 textures, respectively\r\nconst triColorMix = {\r\n  uniforms: {\r\n    tDiffuse1: { value: null },\r\n    tDiffuse2: { value: null },\r\n    tDiffuse3: { value: null }\r\n  },\r\n  vertexShader: `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1);\r\n    }\r\n  `,\r\n  fragmentShader: `\r\n    varying vec2 vUv;\r\n    uniform sampler2D tDiffuse1;\r\n    uniform sampler2D tDiffuse2;\r\n    uniform sampler2D tDiffuse3;\r\n    \r\n    void main() {\r\n      vec4 del0 = texture2D(tDiffuse1, vUv);\r\n      vec4 del1 = texture2D(tDiffuse2, vUv);\r\n      vec4 del2 = texture2D(tDiffuse3, vUv);\r\n      float alpha = min(min(del0.a, del1.a), del2.a);\r\n      gl_FragColor = vec4(del0.r, del1.g, del2.b, alpha);\r\n    }\r\n  `\r\n}\r\n\r\nexport function Effects() {\r\n  const composer = useRef()\r\n  const savePass = useRef()\r\n  const blendPass = useRef()\r\n  const swap = useRef(false) // Whether to swap the delay buffers\r\n  const { scene, gl, size, camera } = useThree()\r\n  const { rtA, rtB } = useMemo(() => {\r\n    const rtA = new THREE.WebGLRenderTarget(size.width, size.height)\r\n    const rtB = new THREE.WebGLRenderTarget(size.width, size.height)\r\n    return { rtA, rtB }\r\n  }, [size])\r\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size])\r\n  useFrame(() => {\r\n    // Swap render targets and update dependencies\r\n    let delay1 = swap.current ? rtB : rtA\r\n    let delay2 = swap.current ? rtA : rtB\r\n    savePass.current.renderTarget = delay2\r\n    blendPass.current.uniforms['tDiffuse2'].value = delay1.texture\r\n    blendPass.current.uniforms['tDiffuse3'].value = delay2.texture\r\n    swap.current = !swap.current\r\n    composer.current.render()\r\n  }, 1)\r\n  const pixelRatio = gl.getPixelRatio()\r\n  return (\r\n    <effectComposer ref={composer} args={[gl]}>\r\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\r\n      <shaderPass attachArray=\"passes\" ref={blendPass} args={[triColorMix, 'tDiffuse1']} needsSwap={false} />\r\n      <savePass attachArray=\"passes\" ref={savePass} needsSwap={true} />\r\n      <shaderPass\r\n        attachArray=\"passes\"\r\n        args={[FXAAShader]}\r\n        uniforms-resolution-value-x={1 / (size.width * pixelRatio)}\r\n        uniforms-resolution-value-y={1 / (size.height * pixelRatio)}\r\n      />\r\n      <shaderPass attachArray=\"passes\" args={[CopyShader]} />\r\n    </effectComposer>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}